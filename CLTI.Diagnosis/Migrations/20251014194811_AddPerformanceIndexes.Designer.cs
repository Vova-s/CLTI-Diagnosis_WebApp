// <auto-generated />
using System;
using CLTI.Diagnosis.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CLTI.Diagnosis.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251014194811_AddPerformanceIndexes")]
    partial class AddPerformanceIndexes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CLTI.Diagnosis.Core.Domain.Entities.CltiCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AbiKpi")
                        .HasColumnType("float");

                    b.Property<int>("ClinicalStageWIfIEnumItemId")
                        .HasColumnType("int");

                    b.Property<int>("CrabPoints")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<double?>("FbiPpi")
                        .HasColumnType("float");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("TwoYLE")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ClinicalStageWIfIEnumItemId");

                    b.ToTable("u_clti", (string)null);
                });

            modelBuilder.Entity("CLTI.Diagnosis.Core.Domain.Entities.CltiPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("CTA")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("CltiCaseGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CltiCaseId")
                        .HasColumnType("int");

                    b.Property<byte[]>("DSA")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<byte[]>("MRA")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("USOfLowerExtremityArteries")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("US_of_lower_extremity_arteries");

                    b.HasKey("Id");

                    b.HasIndex("CltiCaseId");

                    b.ToTable("u_clti_photos", (string)null);
                });

            modelBuilder.Entity("CLTI.Diagnosis.Core.Domain.Entities.SysApiKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("StatusEnumItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusEnumItemId");

                    b.ToTable("sys_api_key", (string)null);
                });

            modelBuilder.Entity("CLTI.Diagnosis.Core.Domain.Entities.SysEnum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("OrderingType")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("OrderingTypeEditor")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("sys_enum", (string)null);
                });

            modelBuilder.Entity("CLTI.Diagnosis.Core.Domain.Entities.SysEnumItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Icon")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<int>("SysEnumId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("SysEnumId");

                    b.ToTable("sys_enum_item", (string)null);
                });

            modelBuilder.Entity("CLTI.Diagnosis.Core.Domain.Entities.SysLicence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("LicenceKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("LicenceTypeEnumItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusEnumItemId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LicenceTypeEnumItemId");

                    b.HasIndex("StatusEnumItemId");

                    b.ToTable("sys_licence", (string)null);
                });

            modelBuilder.Entity("CLTI.Diagnosis.Core.Domain.Entities.SysLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logger")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoggerNamespace")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Logger_namespace");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProcessId")
                        .HasColumnType("int");

                    b.Property<string>("Thread")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("sys_log", (string)null);
                });

            modelBuilder.Entity("CLTI.Diagnosis.Core.Domain.Entities.SysRefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("ReplacedByToken")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("sys_refresh_token", (string)null);
                });

            modelBuilder.Entity("CLTI.Diagnosis.Core.Domain.Entities.SysRights", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("sys_rights", (string)null);
                });

            modelBuilder.Entity("CLTI.Diagnosis.Core.Domain.Entities.SysRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("sys_role", (string)null);
                });

            modelBuilder.Entity("CLTI.Diagnosis.Core.Domain.Entities.SysRoleRights", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SysRightId")
                        .HasColumnType("int");

                    b.Property<int>("SysRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SysRightId");

                    b.HasIndex("SysRoleId");

                    b.ToTable("sys_role_rights", (string)null);
                });

            modelBuilder.Entity("CLTI.Diagnosis.Core.Domain.Entities.SysUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PasswordHashType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("StatusEnumItemId")
                        .HasColumnType("int");

                    b.Property<string>("TitleAfterName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TitleBeforeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("StatusEnumItemId");

                    b.ToTable("sys_user", (string)null);
                });

            modelBuilder.Entity("CLTI.Diagnosis.Core.Domain.Entities.SysUserLicence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssignedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("LicenceId")
                        .HasColumnType("int");

                    b.Property<int>("StatusEnumItemId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LicenceId");

                    b.HasIndex("StatusEnumItemId");

                    b.HasIndex("UserId");

                    b.ToTable("sys_user_licence", (string)null);
                });

            modelBuilder.Entity("CLTI.Diagnosis.Core.Domain.Entities.SysUserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SysRoleId")
                        .HasColumnType("int");

                    b.Property<int>("SysUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SysRoleId");

                    b.HasIndex("SysUserId");

                    b.ToTable("sys_user_role", (string)null);
                });

            modelBuilder.Entity("CLTI.Diagnosis.Core.Domain.Entities.CltiCase", b =>
                {
                    b.HasOne("CLTI.Diagnosis.Core.Domain.Entities.SysEnumItem", "ClinicalStageEnumItem")
                        .WithMany()
                        .HasForeignKey("ClinicalStageWIfIEnumItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("CLTI.Diagnosis.Core.Domain.Entities.ValueObjects.GlassCriteria", "GlassCriteria", b1 =>
                        {
                            b1.Property<int>("CltiCaseId")
                                .HasColumnType("int");

                            b1.Property<bool>("AidA")
                                .HasColumnType("bit");

                            b1.Property<bool>("AidB")
                                .HasColumnType("bit");

                            b1.Property<bool>("AidI")
                                .HasColumnType("bit");

                            b1.Property<bool>("AidII")
                                .HasColumnType("bit");

                            b1.Property<int>("Fps")
                                .HasColumnType("int");

                            b1.Property<bool>("Iid")
                                .HasColumnType("bit");

                            b1.Property<bool>("IidI")
                                .HasColumnType("bit");

                            b1.Property<bool>("IidII")
                                .HasColumnType("bit");

                            b1.Property<bool>("IidIII")
                                .HasColumnType("bit");

                            b1.Property<bool>("ImdP0")
                                .HasColumnType("bit");

                            b1.Property<bool>("ImdP1")
                                .HasColumnType("bit");

                            b1.Property<bool>("ImdP2")
                                .HasColumnType("bit");

                            b1.Property<int>("Ips")
                                .HasColumnType("int");

                            b1.HasKey("CltiCaseId");

                            b1.ToTable("u_clti");

                            b1.WithOwner()
                                .HasForeignKey("CltiCaseId");
                        });

                    b.OwnsOne("CLTI.Diagnosis.Core.Domain.Entities.ValueObjects.WifiCriteria", "WifiCriteria", b1 =>
                        {
                            b1.Property<int>("CltiCaseId")
                                .HasColumnType("int");

                            b1.Property<bool>("FI0")
                                .HasColumnType("bit");

                            b1.Property<bool>("FI1")
                                .HasColumnType("bit");

                            b1.Property<bool>("FI2")
                                .HasColumnType("bit");

                            b1.Property<bool>("FI3")
                                .HasColumnType("bit");

                            b1.Property<bool>("I0")
                                .HasColumnType("bit");

                            b1.Property<bool>("I1")
                                .HasColumnType("bit");

                            b1.Property<bool>("I2")
                                .HasColumnType("bit");

                            b1.Property<bool>("I3")
                                .HasColumnType("bit");

                            b1.Property<bool>("W1")
                                .HasColumnType("bit");

                            b1.Property<bool>("W2")
                                .HasColumnType("bit");

                            b1.Property<bool>("W3")
                                .HasColumnType("bit");

                            b1.HasKey("CltiCaseId");

                            b1.ToTable("u_clti");

                            b1.WithOwner()
                                .HasForeignKey("CltiCaseId");
                        });

                    b.Navigation("ClinicalStageEnumItem");

                    b.Navigation("GlassCriteria")
                        .IsRequired();

                    b.Navigation("WifiCriteria")
                        .IsRequired();
                });

            modelBuilder.Entity("CLTI.Diagnosis.Core.Domain.Entities.CltiPhoto", b =>
                {
                    b.HasOne("CLTI.Diagnosis.Core.Domain.Entities.CltiCase", "CltiCase")
                        .WithMany("Photos")
                        .HasForeignKey("CltiCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CltiCase");
                });

            modelBuilder.Entity("CLTI.Diagnosis.Core.Domain.Entities.SysApiKey", b =>
                {
                    b.HasOne("CLTI.Diagnosis.Core.Domain.Entities.SysEnumItem", "StatusEnumItem")
                        .WithMany()
                        .HasForeignKey("StatusEnumItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StatusEnumItem");
                });

            modelBuilder.Entity("CLTI.Diagnosis.Core.Domain.Entities.SysEnumItem", b =>
                {
                    b.HasOne("CLTI.Diagnosis.Core.Domain.Entities.SysEnum", "SysEnum")
                        .WithMany("Items")
                        .HasForeignKey("SysEnumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SysEnum");
                });

            modelBuilder.Entity("CLTI.Diagnosis.Core.Domain.Entities.SysLicence", b =>
                {
                    b.HasOne("CLTI.Diagnosis.Core.Domain.Entities.SysEnumItem", "LicenceTypeEnumItem")
                        .WithMany()
                        .HasForeignKey("LicenceTypeEnumItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CLTI.Diagnosis.Core.Domain.Entities.SysEnumItem", "StatusEnumItem")
                        .WithMany()
                        .HasForeignKey("StatusEnumItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LicenceTypeEnumItem");

                    b.Navigation("StatusEnumItem");
                });

            modelBuilder.Entity("CLTI.Diagnosis.Core.Domain.Entities.SysRefreshToken", b =>
                {
                    b.HasOne("CLTI.Diagnosis.Core.Domain.Entities.SysUser", "User")
                        .WithMany("SysRefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CLTI.Diagnosis.Core.Domain.Entities.SysRoleRights", b =>
                {
                    b.HasOne("CLTI.Diagnosis.Core.Domain.Entities.SysRights", "SysRight")
                        .WithMany()
                        .HasForeignKey("SysRightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CLTI.Diagnosis.Core.Domain.Entities.SysRole", "SysRole")
                        .WithMany()
                        .HasForeignKey("SysRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SysRight");

                    b.Navigation("SysRole");
                });

            modelBuilder.Entity("CLTI.Diagnosis.Core.Domain.Entities.SysUser", b =>
                {
                    b.HasOne("CLTI.Diagnosis.Core.Domain.Entities.SysEnumItem", "StatusEnumItem")
                        .WithMany()
                        .HasForeignKey("StatusEnumItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StatusEnumItem");
                });

            modelBuilder.Entity("CLTI.Diagnosis.Core.Domain.Entities.SysUserLicence", b =>
                {
                    b.HasOne("CLTI.Diagnosis.Core.Domain.Entities.SysLicence", "Licence")
                        .WithMany()
                        .HasForeignKey("LicenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CLTI.Diagnosis.Core.Domain.Entities.SysEnumItem", "StatusEnumItem")
                        .WithMany()
                        .HasForeignKey("StatusEnumItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CLTI.Diagnosis.Core.Domain.Entities.SysUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Licence");

                    b.Navigation("StatusEnumItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CLTI.Diagnosis.Core.Domain.Entities.SysUserRole", b =>
                {
                    b.HasOne("CLTI.Diagnosis.Core.Domain.Entities.SysRole", "SysRole")
                        .WithMany()
                        .HasForeignKey("SysRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CLTI.Diagnosis.Core.Domain.Entities.SysUser", "SysUser")
                        .WithMany("SysUserRoles")
                        .HasForeignKey("SysUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SysRole");

                    b.Navigation("SysUser");
                });

            modelBuilder.Entity("CLTI.Diagnosis.Core.Domain.Entities.CltiCase", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("CLTI.Diagnosis.Core.Domain.Entities.SysEnum", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("CLTI.Diagnosis.Core.Domain.Entities.SysUser", b =>
                {
                    b.Navigation("SysRefreshTokens");

                    b.Navigation("SysUserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
