using CLTI.Diagnosis.Data;
using CLTI.Diagnosis.Core.Domain.Entities;
using Microsoft.EntityFrameworkCore;
using CLTI.Diagnosis.Infrastructure.Services;

namespace CLTI.Diagnosis.Services
{

    public interface IUserService
    {
        Task<SysUser?> GetCurrentUserAsync(int userId);
        Task<bool> UpdateUserAsync(int userId, UpdateUserDto updateDto);
        Task<bool> ChangePasswordAsync(int userId, string oldPassword, string newPassword);
        Task<bool> DeleteUserAsync(int userId);
    }

    public class UserService : IUserService
    {
        private readonly ApplicationDbContext _context;
        private readonly ILogger<UserService> _logger;
        private readonly IPasswordHasherService _passwordHasher;

        public UserService(
            ApplicationDbContext context, 
            ILogger<UserService> logger,
            IPasswordHasherService passwordHasher)
        {
            _context = context;
            _logger = logger;
            _passwordHasher = passwordHasher;
        }

        public async Task<SysUser?> GetCurrentUserAsync(int userId)
        {
            try
            {
                return await _context.SysUsers
                    .Include(u => u.StatusEnumItem)
                    .FirstOrDefaultAsync(u => u.Id == userId);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå ERROR getting user | UserId: {UserId} | Error: {Error}", userId, ex.Message);
                return null;
            }
        }

        public async Task<bool> UpdateUserAsync(int userId, UpdateUserDto updateDto)
        {
            try
            {
                var user = await _context.SysUsers.FirstOrDefaultAsync(u => u.Id == userId);
                if (user == null)
                {
                    _logger.LogWarning("üë§ User not found for update | UserId: {UserId}", userId);
                    return false;
                }

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ email –Ω–µ –∑–∞–π–Ω—è—Ç–∏–π —ñ–Ω—à–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
                if (!string.IsNullOrEmpty(updateDto.Email) && updateDto.Email != user.Email)
                {
                    var existingUser = await _context.SysUsers
                        .FirstOrDefaultAsync(u => u.Email == updateDto.Email && u.Id != userId);

                    if (existingUser != null)
                    {
                        _logger.LogWarning("üìß Email already taken by another user | Email: {Email}", updateDto.Email);
                        return false;
                    }
                }

                // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ
                if (!string.IsNullOrEmpty(updateDto.FirstName))
                    user.FirstName = updateDto.FirstName;

                if (!string.IsNullOrEmpty(updateDto.LastName))
                    user.LastName = updateDto.LastName;

                if (!string.IsNullOrEmpty(updateDto.Email))
                    user.Email = updateDto.Email;

                await _context.SaveChangesAsync();
                _logger.LogDebug("User {UserId} updated successfully", userId);
                return true;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå ERROR updating user | UserId: {UserId} | Error: {Error}", userId, ex.Message);
                return false;
            }
        }

        public async Task<bool> ChangePasswordAsync(int userId, string oldPassword, string newPassword)
        {
            try
            {
                var user = await _context.SysUsers.FirstOrDefaultAsync(u => u.Id == userId);
                if (user == null)
                {
                    _logger.LogWarning("üë§ User not found for password change | UserId: {UserId}", userId);
                    return false;
                }

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ä–∏–π –ø–∞—Ä–æ–ª—å –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—é –º—ñ–≥—Ä–∞—Ü—ñ—î—é
                var (isValid, needsMigration) = _passwordHasher.VerifyPasswordWithMigration(
                    oldPassword, 
                    user.Password, 
                    user.PasswordHashType
                );

                if (!isValid)
                {
                    _logger.LogWarning("üîí Invalid old password | UserId: {UserId}", userId);
                    return false;
                }

                // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º PBKDF2-SHA256 (—Å—É—á–∞—Å–Ω–∏–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç)
                user.Password = _passwordHasher.HashPassword(newPassword);
                user.PasswordHashType = "PBKDF2-SHA256";
                
                await _context.SaveChangesAsync();

                // Password change - –≤–∞–∂–ª–∏–≤–∞ –ø–æ–¥—ñ—è –¥–ª—è –±–µ–∑–ø–µ–∫–∏, –ª–æ–≥—É—î–º–æ —è–∫ Warning —â–æ–± —Ñ—ñ–∫—Å—É–≤–∞—Ç–∏ –≤ security logs
                _logger.LogWarning("üîë Password changed successfully | UserId: {UserId}", userId);
                return true;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå ERROR changing password | UserId: {UserId} | Error: {Error}", userId, ex.Message);
                return false;
            }
        }

        public async Task<bool> DeleteUserAsync(int userId)
        {
            try
            {
                var user = await _context.SysUsers.FirstOrDefaultAsync(u => u.Id == userId);
                if (user == null)
                {
                    _logger.LogWarning("üë§ User not found for deletion | UserId: {UserId}", userId);
                    return false;
                }

                _context.SysUsers.Remove(user);
                await _context.SaveChangesAsync();

                // User deletion - –∫—Ä–∏—Ç–∏—á–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è, –ª–æ–≥—É—î–º–æ —è–∫ Warning
                _logger.LogWarning("üóëÔ∏è User deleted successfully | UserId: {UserId}", userId);
                return true;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå ERROR deleting user | UserId: {UserId} | Error: {Error}", userId, ex.Message);
                return false;
            }
        }

    }

    // DTO –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    public class UpdateUserDto
    {
        public string? FirstName { get; set; }
        public string? LastName { get; set; }
        public string? Email { get; set; }
    }
}
