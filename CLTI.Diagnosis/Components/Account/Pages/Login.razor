@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using CLTI.Diagnosis.Data
@using CLTI.Diagnosis.Data.Entities
@using CLTI.Diagnosis.Services
@using Microsoft.EntityFrameworkCore
@using System.Security.Cryptography
@using System.Text

@inject ApplicationDbContext DbContext
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager

<PageTitle>Log in</PageTitle>

<div class="flex flex-col items-center justify-center min-h-screen bg-gray-100 px-4">
    <div class="bg-white shadow-md rounded px-8 pt-6 pb-8 w-full max-w-md mb-4">
        <h2 class="text-2xl font-bold text-center mb-6">Log in</h2>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6" role="alert">
                <p>@errorMessage</p>
            </div>
        }

        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />

            <!-- Email field -->
            <div class="mb-4">
                <label for="Input.Email" class="block text-gray-700 text-sm font-bold mb-2">Email *</label>
                <InputText @bind-Value="Input.Email"
                           id="Input.Email"
                           class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                           autocomplete="username"
                           aria-required="true"
                           placeholder="name@example.com" />
                <ValidationMessage For="() => Input.Email" class="text-red-500 text-sm mt-1" />
            </div>

            <!-- Password field -->
            <div class="mb-4">
                <label for="Input.Password" class="block text-gray-700 text-sm font-bold mb-2">Password *</label>
                <InputText type="password"
                           @bind-Value="Input.Password"
                           id="Input.Password"
                           class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                           autocomplete="current-password"
                           aria-required="true"
                           placeholder="Enter your password" />
                <ValidationMessage For="() => Input.Password" class="text-red-500 text-sm mt-1" />
            </div>

            <!-- Remember me checkbox -->
            <div class="mb-4">
                <label class="flex items-center">
                    <InputCheckbox @bind-Value="Input.RememberMe"
                                   class="mr-2 border-gray-300 rounded" />
                    <span class="text-sm text-gray-700">Remember me</span>
                </label>
            </div>

            <!-- Login button -->
            <div class="mb-6">
                <button type="submit"
                        class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded w-full transition duration-200">
                    Log in
                </button>
            </div>

            <!-- Links section -->
            <div class="text-center text-sm">
                <p class="mb-2">
                    <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))"
                       class="text-blue-500 hover:underline">Register as a new user</a>
                </p>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override void OnInitialized()
    {
        // No external authentication setup needed
    }

    public async Task LoginUser()
    {
        try
        {
            var hashedPassword = HashPassword(Input.Password);

            var user = await DbContext.SysUsers
                .FirstOrDefaultAsync(u => u.Email == Input.Email && u.Password == hashedPassword);

            if (user != null)
            {
                var claims = new List<System.Security.Claims.Claim>
            {
                new(System.Security.Claims.ClaimTypes.NameIdentifier, user.Id.ToString()),
                new(System.Security.Claims.ClaimTypes.Name, user.Email),
                new(System.Security.Claims.ClaimTypes.Email, user.Email)
            };

                var identity = new System.Security.Claims.ClaimsIdentity(claims, IdentityConstants.ApplicationScheme);
                var principal = new System.Security.Claims.ClaimsPrincipal(identity);

                await HttpContext.SignInAsync(IdentityConstants.ApplicationScheme, principal,
                    new AuthenticationProperties { IsPersistent = Input.RememberMe });

                Logger.LogInformation("User {Email} logged in.", Input.Email);

                var redirectUrl = string.IsNullOrEmpty(ReturnUrl) ? "/" : ReturnUrl;

                // 🔄 Безпечний HTTP редирект
                HttpContext.Response.Redirect(redirectUrl);
            }
            else
            {
                errorMessage = "Error: Invalid login attempt.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during login for user {Email}", Input.Email);
            errorMessage = "Error: An error occurred during login.";
        }
    }

    private static string HashPassword(string password)
    {
        using var md5 = MD5.Create();
        var inputBytes = Encoding.UTF8.GetBytes(password);
        var hashBytes = md5.ComputeHash(inputBytes);
        return Convert.ToHexString(hashBytes).ToLower();
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
