@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<Router AppAssembly="typeof(Program).Assembly" AdditionalAssemblies="new[] { typeof(Client._Imports).Assembly }">
    <Found Context="routeData">
        <AuthorizeRouteView RouteData="routeData" DefaultLayout="typeof(Layout.MainLayout)">
            <NotAuthorized>
                <RedirectToLogin />
            </NotAuthorized>
        </AuthorizeRouteView>
        <FocusOnNavigate RouteData="routeData" Selector="h1" />
    </Found>
    <NotFound>
        <PageTitle>Page Not Found</PageTitle>
        <LayoutView Layout="typeof(Layout.MainLayout)">
            <NotFoundComponent />
        </LayoutView>
    </NotFound>
</Router>

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Check if current URL results in 404
            var currentUrl = NavigationManager.Uri;
            var baseUrl = NavigationManager.BaseUri;
            var relativePath = NavigationManager.ToBaseRelativePath(currentUrl);
            
            // If we're on a route that doesn't exist, redirect to server error page
            await JSRuntime.InvokeVoidAsync("window.location.replace", $"{baseUrl}Error?path={Uri.EscapeDataString(relativePath)}");
        }
    }
}