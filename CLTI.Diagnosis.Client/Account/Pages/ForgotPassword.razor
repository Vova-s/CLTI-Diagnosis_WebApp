@page "/Account/ForgotPassword"
@page "/forgot-password"

@using System.ComponentModel.DataAnnotations
@using CLTI.Diagnosis.Client.Services
@inject AuthApiService AuthApi
@inject NavigationManager NavigationManager
@inject ILogger<ForgotPassword> Logger

<PageTitle>Forgot your password?</PageTitle>

<div class="flex flex-col items-center justify-center min-h-screen bg-gray-100 px-4">
    <div class="bg-white shadow-md rounded px-8 pt-6 pb-8 w-full max-w-md">
        <h1 class="text-2xl font-bold text-center mb-2">Forgot your password?</h1>
        <h2 class="text-lg text-center text-gray-600 mb-6">Enter your email.</h2>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6" role="alert">
                <p>@errorMessage</p>
            </div>
        }

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 mb-6" role="alert">
                <p>@successMessage</p>
            </div>
        }

        @if (isLoading)
        {
            <div class="flex justify-center items-center mb-6">
                <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
                <span class="ml-2 text-gray-600">Sending reset email...</span>
            </div>
        }

        <EditForm Model="Input" method="post" OnValidSubmit="OnValidSubmitAsync" FormName="forgot-password">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-red-500 mb-4" role="alert" />

            <div class="mb-4">
                <label for="Input.Email" class="block text-gray-700 text-sm font-bold mb-2">Email *</label>
                <InputText @bind-Value="Input.Email"
                           id="Input.Email"
                           class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                           placeholder="Enter your email"
                           disabled="@isLoading" />
                <ValidationMessage For="() => Input.Email" class="text-red-500 text-sm mt-1" />
            </div>

            <button type="submit"
                    class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded w-full transition duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
                    disabled="@isLoading">
                @if (isLoading)
                {
                    <span>Sending...</span>
                }
                else
                {
                    <span>Send Reset Email</span>
                }
            </button>
        </EditForm>

        <!-- Back to Login Link -->
        <div class="mt-4 text-center text-sm text-gray-600">
            <a href="/Account/Login" class="text-blue-500 hover:underline font-medium">Back to Login</a>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;
    private string? successMessage;
    private bool isLoading = false;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    public async Task OnValidSubmitAsync()
    {
        if (isLoading)
            return;

        try
        {
            isLoading = true;
            errorMessage = null;
            successMessage = null;
            StateHasChanged();

            Logger.LogInformation("Attempting password reset for user: {Email}", Input.Email);

            // Use AuthApiService for password reset
            var result = await AuthApi.ForgotPasswordAsync(Input.Email);

            if (result.Success)
            {
                Logger.LogInformation("Password reset email sent successfully for user: {Email}", Input.Email);
                successMessage = "Please check your email to reset your password.";
            }
            else
            {
                errorMessage = result.Message ?? "Failed to send reset email";
                Logger.LogWarning("Password reset failed for user {Email}: {Error}", Input.Email, errorMessage);
            }
        }
        catch (HttpRequestException ex)
        {
            Logger.LogError(ex, "Network error during password reset for user {Email}", Input.Email);
            errorMessage = "Network error. Please check your connection and try again.";
        }
        catch (TaskCanceledException ex)
        {
            Logger.LogError(ex, "Timeout during password reset for user {Email}", Input.Email);
            errorMessage = "Request timed out. Please try again.";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Unexpected error during password reset for user {Email}", Input.Email);
            errorMessage = "An unexpected error occurred. Please try again.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    public class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;
    }
}