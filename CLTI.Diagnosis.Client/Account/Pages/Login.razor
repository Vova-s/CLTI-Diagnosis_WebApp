@page "/Account/Login"
@page "/login"

@using System.ComponentModel.DataAnnotations
@using CLTI.Diagnosis.Client.Services
@inject AuthApiService AuthApi
@inject NavigationManager NavigationManager
@inject ILogger<Login> Logger

<PageTitle>Log in</PageTitle>

<div class="flex flex-col items-center justify-center min-h-screen bg-gray-100 px-4">
    <div class="bg-white shadow-md rounded px-8 pt-6 pb-8 w-full max-w-md mb-4">
        <h2 class="text-2xl font-bold text-center mb-6">Log in</h2>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6" role="alert">
                <p>@errorMessage</p>
            </div>
        }

        @if (isLoading)
        {
            <div class="flex justify-center items-center mb-6">
                <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
                <span class="ml-2 text-gray-600">Logging in...</span>
            </div>
        }

        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />

            <!-- Email field -->
            <div class="mb-4">
                <label for="Input.Email" class="block text-gray-700 text-sm font-bold mb-2">Email *</label>
                <InputText @bind-Value="Input.Email"
                           id="Input.Email"
                           class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                           autocomplete="username"
                           aria-required="true"
                           placeholder="name@example.com"
                           disabled="@isLoading" />
                <ValidationMessage For="() => Input.Email" class="text-red-500 text-sm mt-1" />
            </div>

            <!-- Password field -->
            <div class="mb-4">
                <label for="Input.Password" class="block text-gray-700 text-sm font-bold mb-2">Password *</label>
                <InputText type="password"
                           @bind-Value="Input.Password"
                           id="Input.Password"
                           class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                           autocomplete="current-password"
                           aria-required="true"
                           placeholder="Enter your password"
                           disabled="@isLoading" />
                <ValidationMessage For="() => Input.Password" class="text-red-500 text-sm mt-1" />
            </div>

            <!-- Remember me checkbox -->
            <div class="mb-4">
                <label class="flex items-center">
                    <InputCheckbox @bind-Value="Input.RememberMe"
                                   class="mr-2 border-gray-300 rounded"
                                   disabled="@isLoading" />
                    <span class="text-sm text-gray-700">Remember me</span>
                </label>
            </div>

            <!-- Login button -->
            <div class="mb-6">
                <button type="submit"
                        class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded w-full transition duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
                        disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span>Logging in...</span>
                    }
                    else
                    {
                        <span>Log in</span>
                    }
                </button>
            </div>

            <!-- Links section -->
            <div class="text-center text-sm">
                <p class="mb-2">
                    <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))"
                       class="text-blue-500 hover:underline">Register as a new user</a>
                </p>
                <p>
                    <a href="/Account/ForgotPassword" class="text-blue-500 hover:underline">Forgot your password?</a>
                </p>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private string? errorMessage;
    private bool isLoading = false;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    public async Task LoginUser()
    {
        if (isLoading)
            return;

        try
        {
            isLoading = true;
            errorMessage = null;
            StateHasChanged();

            Logger.LogInformation("Attempting JWT login for user: {Email}", Input.Email);

            // Використовуємо AuthApiService для JWT логіну
            var result = await AuthApi.LoginAsync(Input.Email, Input.Password, Input.RememberMe);

            if (result.Success)
            {
                Logger.LogInformation("JWT Login successful for user: {Email}", Input.Email);

                // Перенаправляємо на потрібну сторінку
                var redirectUrl = string.IsNullOrEmpty(ReturnUrl) ? "/" : ReturnUrl;
                NavigationManager.NavigateTo(redirectUrl, forceLoad: true);
            }
            else
            {
                errorMessage = result.Message ?? "Login failed";
                Logger.LogWarning("JWT Login failed for user {Email}: {Error}", Input.Email, errorMessage);
            }
        }
        catch (HttpRequestException ex)
        {
            Logger.LogError(ex, "Network error during JWT login for user {Email}", Input.Email);
            errorMessage = "Network error. Please check your connection and try again.";
        }
        catch (TaskCanceledException ex)
        {
            Logger.LogError(ex, "Timeout during JWT login for user {Email}", Input.Email);
            errorMessage = "Request timed out. Please try again.";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Unexpected error during JWT login for user {Email}", Input.Email);
            errorMessage = "An unexpected error occurred. Please try again.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}