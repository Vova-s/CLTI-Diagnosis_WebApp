@page "/Account/ResetPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using CLTI.Diagnosis.Data

@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Reset password</PageTitle>

<div class="flex flex-col items-center justify-center min-h-screen bg-gray-100 px-4">
    <div class="bg-white shadow-md rounded px-8 pt-6 pb-8 w-full max-w-md">
        <h1 class="text-2xl font-bold text-center mb-2">Reset Password</h1>
        <h2 class="text-lg text-center text-gray-600 mb-6">Create a new password.</h2>

        @if (Message != null)
        {
            <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4" role="alert">
                <p>@Message</p>
            </div>
        }

        <EditForm Model="Input" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-red-500 mb-4" role="alert" />

            <input type="hidden" name="Input.Code" value="@Input.Code" />

            <!-- Email Field -->
            <div class="mb-4">
                <label for="Input.Email" class="block text-gray-700 text-sm font-bold mb-2">Email *</label>
                <InputText @bind-Value="Input.Email"
                           id="Input.Email"
                           class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                           autocomplete="username"
                           aria-required="true"
                           placeholder="name@example.com" />
                <ValidationMessage For="() => Input.Email" class="text-red-500 text-sm mt-1" />
            </div>

            <!-- Password Field -->
            <div class="mb-4">
                <label for="Input.Password" class="block text-gray-700 text-sm font-bold mb-2">Password *</label>
                <InputText type="password"
                           @bind-Value="Input.Password"
                           id="Input.Password"
                           class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                           autocomplete="new-password"
                           aria-required="true"
                           placeholder="Enter your new password" />
                <ValidationMessage For="() => Input.Password" class="text-red-500 text-sm mt-1" />
            </div>

            <!-- Confirm Password Field -->
            <div class="mb-6">
                <label for="Input.ConfirmPassword" class="block text-gray-700 text-sm font-bold mb-2">Confirm Password *</label>
                <InputText type="password"
                           @bind-Value="Input.ConfirmPassword"
                           id="Input.ConfirmPassword"
                           class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                           autocomplete="new-password"
                           aria-required="true"
                           placeholder="Confirm your new password" />
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-red-500 text-sm mt-1" />
            </div>

            <!-- Reset Button -->
            <button type="submit"
                    class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded w-full transition duration-200">
                Reset Password
            </button>
        </EditForm>

        <div class="mt-4 text-center text-sm text-gray-600">
            <a href="/Account/Login" class="text-blue-500 hover:underline font-medium">
                Return to login
            </a>
        </div>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized()
    {
        if (Code is null)
        {
            RedirectManager.RedirectTo("Account/InvalidPasswordReset");
        }

        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
    }

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            // Don't reveal that the user does not exist
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);
        if (result.Succeeded)
        {
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        identityErrors = result.Errors;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        public string Code { get; set; } = "";
    }
}